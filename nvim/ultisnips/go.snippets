# if err
snippet iferr "if err"
if err != nil {
	return ${1:var}, err
}
endsnippet

# print
snippet fp "fmt.Println"
fmt.Println(${1:_TODO_})
$0
endsnippet

snippet print "print"
fmt.${1:Println}(${2:_TODO_})
$0
endsnippet

# format string
snippet format "format string"
${1:str} = fmt.Fprintf("${2:template}", ${3:vars})
$0
endsnippet

# type
snippet type "new type"
type ${1:_TODO_} ${2:struct} {
	${3:_TODO_}
}
endsnippet

# main
snippet main "main template"
package main

func main() {
	$0
}
endsnippet

# function
snippet func "function"
func ${1:_TODO_}(${2:_TODO_}) (${3:_TODO_}) {
	$0
}
endsnippet

# switch
snippet switch "switch"
switch ${1:_TODO_} {
	case ${2:_TODO_}:
		${3:_TODO_}
	default:
		${4:_TODO_}
}
$0
endsnippet

# for
snippet for "for"
for ${1:_}, ${2:_TODO_} := range ${3:_TODO_} {
	$0
}
endsnippet

# while
snippet while "while"
for ${1:condition} {
	${2:logic}
}
$0
endsnippet

# log.Errorf
snippet loge "log.Errorf()"
log.Errorf("${1:_TODO_}, err=%s", ${2:_TODO_}, err)
endsnippet
